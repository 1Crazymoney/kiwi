namespace test {
  class BinarySchema {
    var _schema = Kiwi.BinarySchema.new
    var _indexBoolMessage = 0
    var _indexByteMessage = 0
    var _indexIntMessage = 0
    var _indexUintMessage = 0
    var _indexFloatMessage = 0
    var _indexStringMessage = 0
    var _indexCompoundMessage = 0
    var _indexNestedMessage = 0
    var _indexBoolArrayMessage = 0
    var _indexByteArrayMessage = 0
    var _indexIntArrayMessage = 0
    var _indexUintArrayMessage = 0
    var _indexFloatArrayMessage = 0
    var _indexStringArrayMessage = 0
    var _indexCompoundArrayMessage = 0
    var _indexRecursiveMessage = 0

    def parse(bytes Uint8Array) {
      _schema.parse(Kiwi.ByteBuffer.new(bytes))
      _indexBoolMessage = _schema.findDefinition("BoolMessage")
      _indexByteMessage = _schema.findDefinition("ByteMessage")
      _indexIntMessage = _schema.findDefinition("IntMessage")
      _indexUintMessage = _schema.findDefinition("UintMessage")
      _indexFloatMessage = _schema.findDefinition("FloatMessage")
      _indexStringMessage = _schema.findDefinition("StringMessage")
      _indexCompoundMessage = _schema.findDefinition("CompoundMessage")
      _indexNestedMessage = _schema.findDefinition("NestedMessage")
      _indexBoolArrayMessage = _schema.findDefinition("BoolArrayMessage")
      _indexByteArrayMessage = _schema.findDefinition("ByteArrayMessage")
      _indexIntArrayMessage = _schema.findDefinition("IntArrayMessage")
      _indexUintArrayMessage = _schema.findDefinition("UintArrayMessage")
      _indexFloatArrayMessage = _schema.findDefinition("FloatArrayMessage")
      _indexStringArrayMessage = _schema.findDefinition("StringArrayMessage")
      _indexCompoundArrayMessage = _schema.findDefinition("CompoundArrayMessage")
      _indexRecursiveMessage = _schema.findDefinition("RecursiveMessage")
    }

    def skipBoolMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexBoolMessage, id)
    }

    def skipByteMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexByteMessage, id)
    }

    def skipIntMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexIntMessage, id)
    }

    def skipUintMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexUintMessage, id)
    }

    def skipFloatMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexFloatMessage, id)
    }

    def skipStringMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexStringMessage, id)
    }

    def skipCompoundMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexCompoundMessage, id)
    }

    def skipNestedMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexNestedMessage, id)
    }

    def skipBoolArrayMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexBoolArrayMessage, id)
    }

    def skipByteArrayMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexByteArrayMessage, id)
    }

    def skipIntArrayMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexIntArrayMessage, id)
    }

    def skipUintArrayMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexUintArrayMessage, id)
    }

    def skipFloatArrayMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexFloatArrayMessage, id)
    }

    def skipStringArrayMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexStringArrayMessage, id)
    }

    def skipCompoundArrayMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexCompoundArrayMessage, id)
    }

    def skipRecursiveMessageField(bb Kiwi.ByteBuffer, id int) {
      _schema.skipField(bb, _indexRecursiveMessage, id)
    }
  }

  enum Enum {
    A
    B
  }

  namespace Enum {
    const _encode = {
      A: 100,
      B: 200
    }

    const _decode = {
      100: A,
      200: B
    }

    def encode(value Enum) int {
      return _encode[value]
    }

    def decode(value int) Enum {
      if !(value in _decode) {
        Kiwi.DecodeError.throwInvalidEnumValue("Enum")
      }
      return _decode[value]
    }
  }

  class EnumStruct {
    var _flags0 = 0
    var _x Enum = .A
    var _y List<Enum> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x Enum {
      assert(has_x)
      return _x
    }

    def x=(value Enum) {
      _x = value
      _flags0 |= 1
    }

    def has_y bool {
      return (_flags0 & 2) != 0
    }

    def y List<Enum> {
      assert(has_y)
      return _y
    }

    def y=(value List<Enum>) {
      _y = value
      _flags0 |= 2
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarUint(Enum.encode(_x))

      assert(has_y)
      bb.writeVarUint(_y.count)
      for value in _y {
        bb.writeVarUint(Enum.encode(value))
      }
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace EnumStruct {
    def decode(bytes Uint8Array) EnumStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) EnumStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) EnumStruct {
      var self = new
      var count = 0
      self.x = Enum.decode(bb.readVarUint)
      count = bb.readVarUint
      self.y = []
      for array = self._y; count != 0; count-- {
        array.append(Enum.decode(bb.readVarUint))
      }
      return self
    }
  }

  class BoolStruct {
    var _flags0 = 0
    var _x bool = false

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x bool {
      assert(has_x)
      return _x
    }

    def x=(value bool) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeByte(_x as int)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace BoolStruct {
    def decode(bytes Uint8Array) BoolStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) BoolStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) BoolStruct {
      var self = new
      self.x = bb.readByte as bool
      return self
    }
  }

  class ByteStruct {
    var _flags0 = 0
    var _x int = 0

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x int {
      assert(has_x)
      return _x
    }

    def x=(value int) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeByte(_x)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace ByteStruct {
    def decode(bytes Uint8Array) ByteStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) ByteStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) ByteStruct {
      var self = new
      self.x = bb.readByte
      return self
    }
  }

  class IntStruct {
    var _flags0 = 0
    var _x int = 0

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x int {
      assert(has_x)
      return _x
    }

    def x=(value int) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarInt(_x)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace IntStruct {
    def decode(bytes Uint8Array) IntStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) IntStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) IntStruct {
      var self = new
      self.x = bb.readVarInt
      return self
    }
  }

  class UintStruct {
    var _flags0 = 0
    var _x int = 0

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x int {
      assert(has_x)
      return _x
    }

    def x=(value int) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarUint(_x)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace UintStruct {
    def decode(bytes Uint8Array) UintStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) UintStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) UintStruct {
      var self = new
      self.x = bb.readVarUint
      return self
    }
  }

  class FloatStruct {
    var _flags0 = 0
    var _x double = 0.0

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x double {
      assert(has_x)
      return _x
    }

    def x=(value double) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarFloat(_x)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace FloatStruct {
    def decode(bytes Uint8Array) FloatStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) FloatStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) FloatStruct {
      var self = new
      self.x = bb.readVarFloat
      return self
    }
  }

  class StringStruct {
    var _flags0 = 0
    var _x string = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x string {
      assert(has_x)
      return _x
    }

    def x=(value string) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeString(_x)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace StringStruct {
    def decode(bytes Uint8Array) StringStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) StringStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) StringStruct {
      var self = new
      self.x = bb.readString
      return self
    }
  }

  class CompoundStruct {
    var _flags0 = 0
    var _x int = 0
    var _y int = 0

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x int {
      assert(has_x)
      return _x
    }

    def x=(value int) {
      _x = value
      _flags0 |= 1
    }

    def has_y bool {
      return (_flags0 & 2) != 0
    }

    def y int {
      assert(has_y)
      return _y
    }

    def y=(value int) {
      _y = value
      _flags0 |= 2
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarUint(_x)

      assert(has_y)
      bb.writeVarUint(_y)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace CompoundStruct {
    def decode(bytes Uint8Array) CompoundStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) CompoundStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) CompoundStruct {
      var self = new
      self.x = bb.readVarUint
      self.y = bb.readVarUint
      return self
    }
  }

  class NestedStruct {
    var _flags0 = 0
    var _a int = 0
    var _b CompoundStruct = null
    var _c int = 0

    def has_a bool {
      return (_flags0 & 1) != 0
    }

    def a int {
      assert(has_a)
      return _a
    }

    def a=(value int) {
      _a = value
      _flags0 |= 1
    }

    def has_b bool {
      return (_flags0 & 2) != 0
    }

    def b CompoundStruct {
      assert(has_b)
      return _b
    }

    def b=(value CompoundStruct) {
      _b = value
      _flags0 |= 2
    }

    def has_c bool {
      return (_flags0 & 4) != 0
    }

    def c int {
      assert(has_c)
      return _c
    }

    def c=(value int) {
      _c = value
      _flags0 |= 4
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_a)
      bb.writeVarUint(_a)

      assert(has_b)
      _b.encode(bb)

      assert(has_c)
      bb.writeVarUint(_c)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace NestedStruct {
    def decode(bytes Uint8Array) NestedStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) NestedStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) NestedStruct {
      var self = new
      self.a = bb.readVarUint
      self.b = CompoundStruct.decode(bb, schema)
      self.c = bb.readVarUint
      return self
    }
  }

  class BoolMessage {
    var _flags0 = 0
    var _x bool = false

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x bool {
      assert(has_x)
      return _x
    }

    def x=(value bool) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeByte(_x as int)
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace BoolMessage {
    def decode(bytes Uint8Array) BoolMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) BoolMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) BoolMessage {
      var self = new
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            self.x = bb.readByte as bool
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipBoolMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class ByteMessage {
    var _flags0 = 0
    var _x int = 0

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x int {
      assert(has_x)
      return _x
    }

    def x=(value int) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeByte(_x)
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace ByteMessage {
    def decode(bytes Uint8Array) ByteMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) ByteMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) ByteMessage {
      var self = new
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            self.x = bb.readByte
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipByteMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class IntMessage {
    var _flags0 = 0
    var _x int = 0

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x int {
      assert(has_x)
      return _x
    }

    def x=(value int) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarInt(_x)
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace IntMessage {
    def decode(bytes Uint8Array) IntMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) IntMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) IntMessage {
      var self = new
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            self.x = bb.readVarInt
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipIntMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class UintMessage {
    var _flags0 = 0
    var _x int = 0

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x int {
      assert(has_x)
      return _x
    }

    def x=(value int) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarUint(_x)
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace UintMessage {
    def decode(bytes Uint8Array) UintMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) UintMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) UintMessage {
      var self = new
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            self.x = bb.readVarUint
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipUintMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class FloatMessage {
    var _flags0 = 0
    var _x double = 0.0

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x double {
      assert(has_x)
      return _x
    }

    def x=(value double) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarFloat(_x)
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace FloatMessage {
    def decode(bytes Uint8Array) FloatMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) FloatMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) FloatMessage {
      var self = new
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            self.x = bb.readVarFloat
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipFloatMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class StringMessage {
    var _flags0 = 0
    var _x string = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x string {
      assert(has_x)
      return _x
    }

    def x=(value string) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeString(_x)
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace StringMessage {
    def decode(bytes Uint8Array) StringMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) StringMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) StringMessage {
      var self = new
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            self.x = bb.readString
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipStringMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class CompoundMessage {
    var _flags0 = 0
    var _x int = 0
    var _y int = 0

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x int {
      assert(has_x)
      return _x
    }

    def x=(value int) {
      _x = value
      _flags0 |= 1
    }

    def has_y bool {
      return (_flags0 & 2) != 0
    }

    def y int {
      assert(has_y)
      return _y
    }

    def y=(value int) {
      _y = value
      _flags0 |= 2
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarUint(_x)
      }

      if has_y {
        bb.writeVarUint(2)
        bb.writeVarUint(_y)
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace CompoundMessage {
    def decode(bytes Uint8Array) CompoundMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) CompoundMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) CompoundMessage {
      var self = new
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            self.x = bb.readVarUint
          }

          case 2 {
            self.y = bb.readVarUint
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipCompoundMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class NestedMessage {
    var _flags0 = 0
    var _a int = 0
    var _b CompoundMessage = null
    var _c int = 0

    def has_a bool {
      return (_flags0 & 1) != 0
    }

    def a int {
      assert(has_a)
      return _a
    }

    def a=(value int) {
      _a = value
      _flags0 |= 1
    }

    def has_b bool {
      return (_flags0 & 2) != 0
    }

    def b CompoundMessage {
      assert(has_b)
      return _b
    }

    def b=(value CompoundMessage) {
      _b = value
      _flags0 |= 2
    }

    def has_c bool {
      return (_flags0 & 4) != 0
    }

    def c int {
      assert(has_c)
      return _c
    }

    def c=(value int) {
      _c = value
      _flags0 |= 4
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_a {
        bb.writeVarUint(1)
        bb.writeVarUint(_a)
      }

      if has_b {
        bb.writeVarUint(2)
        _b.encode(bb)
      }

      if has_c {
        bb.writeVarUint(3)
        bb.writeVarUint(_c)
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace NestedMessage {
    def decode(bytes Uint8Array) NestedMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) NestedMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) NestedMessage {
      var self = new
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            self.a = bb.readVarUint
          }

          case 2 {
            self.b = CompoundMessage.decode(bb, schema)
          }

          case 3 {
            self.c = bb.readVarUint
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipNestedMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class BoolArrayStruct {
    var _flags0 = 0
    var _x List<bool> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<bool> {
      assert(has_x)
      return _x
    }

    def x=(value List<bool>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarUint(_x.count)
      for value in _x {
        bb.writeByte(value as int)
      }
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace BoolArrayStruct {
    def decode(bytes Uint8Array) BoolArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) BoolArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) BoolArrayStruct {
      var self = new
      var count = 0
      count = bb.readVarUint
      self.x = []
      for array = self._x; count != 0; count-- {
        array.append(bb.readByte as bool)
      }
      return self
    }
  }

  class ByteArrayStruct {
    var _flags0 = 0
    var _x List<int> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<int> {
      assert(has_x)
      return _x
    }

    def x=(value List<int>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarUint(_x.count)
      for value in _x {
        bb.writeByte(value)
      }
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace ByteArrayStruct {
    def decode(bytes Uint8Array) ByteArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) ByteArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) ByteArrayStruct {
      var self = new
      var count = 0
      count = bb.readVarUint
      self.x = []
      for array = self._x; count != 0; count-- {
        array.append(bb.readByte)
      }
      return self
    }
  }

  class IntArrayStruct {
    var _flags0 = 0
    var _x List<int> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<int> {
      assert(has_x)
      return _x
    }

    def x=(value List<int>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarUint(_x.count)
      for value in _x {
        bb.writeVarInt(value)
      }
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace IntArrayStruct {
    def decode(bytes Uint8Array) IntArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) IntArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) IntArrayStruct {
      var self = new
      var count = 0
      count = bb.readVarUint
      self.x = []
      for array = self._x; count != 0; count-- {
        array.append(bb.readVarInt)
      }
      return self
    }
  }

  class UintArrayStruct {
    var _flags0 = 0
    var _x List<int> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<int> {
      assert(has_x)
      return _x
    }

    def x=(value List<int>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarUint(_x.count)
      for value in _x {
        bb.writeVarUint(value)
      }
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace UintArrayStruct {
    def decode(bytes Uint8Array) UintArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) UintArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) UintArrayStruct {
      var self = new
      var count = 0
      count = bb.readVarUint
      self.x = []
      for array = self._x; count != 0; count-- {
        array.append(bb.readVarUint)
      }
      return self
    }
  }

  class FloatArrayStruct {
    var _flags0 = 0
    var _x List<double> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<double> {
      assert(has_x)
      return _x
    }

    def x=(value List<double>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarUint(_x.count)
      for value in _x {
        bb.writeVarFloat(value)
      }
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace FloatArrayStruct {
    def decode(bytes Uint8Array) FloatArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) FloatArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) FloatArrayStruct {
      var self = new
      var count = 0
      count = bb.readVarUint
      self.x = []
      for array = self._x; count != 0; count-- {
        array.append(bb.readVarFloat)
      }
      return self
    }
  }

  class StringArrayStruct {
    var _flags0 = 0
    var _x List<string> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<string> {
      assert(has_x)
      return _x
    }

    def x=(value List<string>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarUint(_x.count)
      for value in _x {
        bb.writeString(value)
      }
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace StringArrayStruct {
    def decode(bytes Uint8Array) StringArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) StringArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) StringArrayStruct {
      var self = new
      var count = 0
      count = bb.readVarUint
      self.x = []
      for array = self._x; count != 0; count-- {
        array.append(bb.readString)
      }
      return self
    }
  }

  class CompoundArrayStruct {
    var _flags0 = 0
    var _x List<int> = null
    var _y List<int> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<int> {
      assert(has_x)
      return _x
    }

    def x=(value List<int>) {
      _x = value
      _flags0 |= 1
    }

    def has_y bool {
      return (_flags0 & 2) != 0
    }

    def y List<int> {
      assert(has_y)
      return _y
    }

    def y=(value List<int>) {
      _y = value
      _flags0 |= 2
    }

    def encode(bb Kiwi.ByteBuffer) {
      assert(has_x)
      bb.writeVarUint(_x.count)
      for value in _x {
        bb.writeVarUint(value)
      }

      assert(has_y)
      bb.writeVarUint(_y.count)
      for value in _y {
        bb.writeVarUint(value)
      }
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace CompoundArrayStruct {
    def decode(bytes Uint8Array) CompoundArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) CompoundArrayStruct {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) CompoundArrayStruct {
      var self = new
      var count = 0
      count = bb.readVarUint
      self.x = []
      for array = self._x; count != 0; count-- {
        array.append(bb.readVarUint)
      }
      count = bb.readVarUint
      self.y = []
      for array = self._y; count != 0; count-- {
        array.append(bb.readVarUint)
      }
      return self
    }
  }

  class BoolArrayMessage {
    var _flags0 = 0
    var _x List<bool> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<bool> {
      assert(has_x)
      return _x
    }

    def x=(value List<bool>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarUint(_x.count)
        for value in _x {
          bb.writeByte(value as int)
        }
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace BoolArrayMessage {
    def decode(bytes Uint8Array) BoolArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) BoolArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) BoolArrayMessage {
      var self = new
      var count = 0
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            count = bb.readVarUint
            self.x = []
            for array = self._x; count != 0; count-- {
              array.append(bb.readByte as bool)
            }
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipBoolArrayMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class ByteArrayMessage {
    var _flags0 = 0
    var _x List<int> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<int> {
      assert(has_x)
      return _x
    }

    def x=(value List<int>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarUint(_x.count)
        for value in _x {
          bb.writeByte(value)
        }
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace ByteArrayMessage {
    def decode(bytes Uint8Array) ByteArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) ByteArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) ByteArrayMessage {
      var self = new
      var count = 0
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            count = bb.readVarUint
            self.x = []
            for array = self._x; count != 0; count-- {
              array.append(bb.readByte)
            }
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipByteArrayMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class IntArrayMessage {
    var _flags0 = 0
    var _x List<int> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<int> {
      assert(has_x)
      return _x
    }

    def x=(value List<int>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarUint(_x.count)
        for value in _x {
          bb.writeVarInt(value)
        }
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace IntArrayMessage {
    def decode(bytes Uint8Array) IntArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) IntArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) IntArrayMessage {
      var self = new
      var count = 0
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            count = bb.readVarUint
            self.x = []
            for array = self._x; count != 0; count-- {
              array.append(bb.readVarInt)
            }
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipIntArrayMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class UintArrayMessage {
    var _flags0 = 0
    var _x List<int> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<int> {
      assert(has_x)
      return _x
    }

    def x=(value List<int>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarUint(_x.count)
        for value in _x {
          bb.writeVarUint(value)
        }
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace UintArrayMessage {
    def decode(bytes Uint8Array) UintArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) UintArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) UintArrayMessage {
      var self = new
      var count = 0
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            count = bb.readVarUint
            self.x = []
            for array = self._x; count != 0; count-- {
              array.append(bb.readVarUint)
            }
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipUintArrayMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class FloatArrayMessage {
    var _flags0 = 0
    var _x List<double> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<double> {
      assert(has_x)
      return _x
    }

    def x=(value List<double>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarUint(_x.count)
        for value in _x {
          bb.writeVarFloat(value)
        }
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace FloatArrayMessage {
    def decode(bytes Uint8Array) FloatArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) FloatArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) FloatArrayMessage {
      var self = new
      var count = 0
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            count = bb.readVarUint
            self.x = []
            for array = self._x; count != 0; count-- {
              array.append(bb.readVarFloat)
            }
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipFloatArrayMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class StringArrayMessage {
    var _flags0 = 0
    var _x List<string> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<string> {
      assert(has_x)
      return _x
    }

    def x=(value List<string>) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarUint(_x.count)
        for value in _x {
          bb.writeString(value)
        }
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace StringArrayMessage {
    def decode(bytes Uint8Array) StringArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) StringArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) StringArrayMessage {
      var self = new
      var count = 0
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            count = bb.readVarUint
            self.x = []
            for array = self._x; count != 0; count-- {
              array.append(bb.readString)
            }
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipStringArrayMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class CompoundArrayMessage {
    var _flags0 = 0
    var _x List<int> = null
    var _y List<int> = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x List<int> {
      assert(has_x)
      return _x
    }

    def x=(value List<int>) {
      _x = value
      _flags0 |= 1
    }

    def has_y bool {
      return (_flags0 & 2) != 0
    }

    def y List<int> {
      assert(has_y)
      return _y
    }

    def y=(value List<int>) {
      _y = value
      _flags0 |= 2
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        bb.writeVarUint(_x.count)
        for value in _x {
          bb.writeVarUint(value)
        }
      }

      if has_y {
        bb.writeVarUint(2)
        bb.writeVarUint(_y.count)
        for value in _y {
          bb.writeVarUint(value)
        }
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace CompoundArrayMessage {
    def decode(bytes Uint8Array) CompoundArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) CompoundArrayMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) CompoundArrayMessage {
      var self = new
      var count = 0
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            count = bb.readVarUint
            self.x = []
            for array = self._x; count != 0; count-- {
              array.append(bb.readVarUint)
            }
          }

          case 2 {
            count = bb.readVarUint
            self.y = []
            for array = self._y; count != 0; count-- {
              array.append(bb.readVarUint)
            }
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipCompoundArrayMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }

  class RecursiveMessage {
    var _flags0 = 0
    var _x RecursiveMessage = null

    def has_x bool {
      return (_flags0 & 1) != 0
    }

    def x RecursiveMessage {
      assert(has_x)
      return _x
    }

    def x=(value RecursiveMessage) {
      _x = value
      _flags0 |= 1
    }

    def encode(bb Kiwi.ByteBuffer) {
      if has_x {
        bb.writeVarUint(1)
        _x.encode(bb)
      }

      bb.writeVarUint(0)
    }

    def encode Uint8Array {
      var bb = Kiwi.ByteBuffer.new
      encode(bb)
      return bb.toUint8Array
    }
  }

  namespace RecursiveMessage {
    def decode(bytes Uint8Array) RecursiveMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), null)
    }

    def decode(bytes Uint8Array, schema BinarySchema) RecursiveMessage {
      return decode(Kiwi.ByteBuffer.new(bytes), schema)
    }

    def decode(bb Kiwi.ByteBuffer, schema BinarySchema) RecursiveMessage {
      var self = new
      while true {
        var type = bb.readVarUint
        switch type {
          case 0 {
            break
          }

          case 1 {
            self.x = RecursiveMessage.decode(bb, schema)
          }

          default {
            if schema == null { Kiwi.DecodeError.throwInvalidMessage }
            else { schema.skipRecursiveMessageField(bb, type) }
          }
        }
      }
      return self
    }
  }
}
